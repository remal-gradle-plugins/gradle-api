name: build

on:
  push:
    branches:
    - main
  schedule:
  - cron: '43 5 * * *'
  workflow_dispatch:
    inputs:
      min:
        required: false
        description: Min Gradle version
        default: '3.0'
      max:
        required: false
        description: Max Gradle version

defaults:
  run:
    shell: bash

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.warning.mode=all -Dsun.net.client.defaultConnectTimeout=15000 -Dsun.net.client.defaultReadTimeout=600000 -Dsun.io.useCanonCaches=false -Djava.awt.headless=true -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false

jobs:
  retrieve-gradle-versions:
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') && !startsWith(github.event.head_commit.message, '[push-back]') }}
    name: Retrieve Gradle versions to publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      gradle-versions: ${{ steps.create-output.outputs.result }}
    steps:
    - name: Define min Gradle version
      id: min-version
      env:
        EVENT_INPUT_MIN: ${{ github.event.inputs.min }}
      run: |
        if [ "$EVENT_INPUT_MIN" != "" ]; then
          echo "::set-output name=result::$EVENT_INPUT_MIN"
        else
          echo "::set-output name=result::3.0"
        fi

    - name: Retrieve Gradle versions
      id: retrieve-gradle-versions
      uses: remal-github-actions/retrieve-gradle-versions@v1
      with:
        min: ${{ steps.min-version.outputs.result }}
        max: ${{ github.event.inputs.max }}

    - name: Select Gradle versions
      id: select-gradle-versions
      env:
        VERSIONS: ${{ steps.retrieve-gradle-versions.outputs.allAndRC }}
      run: |
        echo "::set-output name=result::$VERSIONS"

    - name: Retrieve Maven artifact versions
      id: retrieve-maven-artifact-versions
      uses: remal-github-actions/retrieve-maven-artifact-versions@v1
      with:
        group: name.remal.gradle-api
        name: gradle-api
        repository: https://maven.pkg.github.com/remal-gradle-api/packages
        user: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Filter Gradle versions
      id: filter-gradle-versions
      uses: actions/github-script@v3
      if: ${{ steps.retrieve-maven-artifact-versions.outcome == 'success' }}
      env:
        GRADLE_VERSIONS_JSON: ${{ steps.select-gradle-versions.outputs.result }}
        MAVEN_ARTIFACT_VERSIONS_JSON: ${{ steps.retrieve-maven-artifact-versions.outputs.unstable }}
      with:
        script: |
          const { GRADLE_VERSIONS_JSON, MAVEN_ARTIFACT_VERSIONS_JSON } = process.env
          const gradleVersions = JSON.parse(GRADLE_VERSIONS_JSON)
          const mavenArtifactVersions = JSON.parse(MAVEN_ARTIFACT_VERSIONS_JSON)
          mavenArtifactVersions.forEach(version => {
            const index = gradleVersions.indexOf(version)
            if (index >= 0) {
              core.info(`Version ${version} has already been published`)
              gradleVersions.splice(index, 1)
            }
          })
          return gradleVersions

    - name: Create output
      id: create-output
      uses: actions/github-script@v3
      env:
        FILTER_OUTPUT: ${{ steps.filter-gradle-versions.outputs.result }}
        SELECT_OUTPUT: ${{ steps.select-gradle-versions.outputs.result }}
      with:
        script: |
          const { FILTER_OUTPUT, SELECT_OUTPUT } = process.env
          let versions = []
          if ('${{ steps.filter-gradle-versions.outcome }}' === 'success') {
            versions = JSON.parse(FILTER_OUTPUT)
          } else {
            versions = JSON.parse(SELECT_OUTPUT)
          }
          versions.reverse()
          if (!versions.length) {
            versions.push('') // versions array can't be ampty, as it causes 'build' stage to fail
          }
          return versions


  populate-cache:
    name: Populate cache
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/**', '**/*.gradle') }}
        path: |
          ~/.gradle

    - name: Setup Java 11
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: zulu

    - name: Create cache content
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.warning.mode=all -Dsun.net.client.defaultConnectTimeout=15000 -Dsun.net.client.defaultReadTimeout=600000 -Dsun.io.useCanonCaches=false -Djava.awt.headless=true -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false
      run: |
        sed -i 's/-all\.zip/-bin.zip/' gradle/wrapper/gradle-wrapper.properties
        ./gradlew help


  build:
    if: ${{ needs.retrieve-gradle-versions.outputs.gradle-versions != '[""]' }}
    needs:
    - retrieve-gradle-versions
    - populate-cache
    name: Build & publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        gradle-version: ${{ fromJSON(needs.retrieve-gradle-versions.outputs.gradle-versions) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/**', '**/*.gradle') }}
        path: |
          ~/.gradle

    - name: Setup Java 11
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: zulu

    - name: Build
      run: |
        echo "Build for Gradle ${{ matrix.gradle-version }}"
        sed -i 's/-all\.zip/-bin.zip/' gradle/wrapper/gradle-wrapper.properties
        ./gradlew publishToMavenLocal "-Pgradle-version=${{ matrix.gradle-version }}"

    - name: Retrieve Maven artifact versions
      id: retrieve-maven-artifact-versions
      uses: remal-github-actions/retrieve-maven-artifact-versions@v1
      with:
        group: name.remal.gradle-api
        name: gradle-api
        repository: https://maven.pkg.github.com/remal-gradle-api/packages
        user: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Publish
      if: ${{ !contains(fromJSON(steps.retrieve-maven-artifact-versions.outputs.unstable), matrix.gradle-version) }}
      env:
        PUBLISH_USER: ${{ github.actor }}
        PUBLISH_PASSWORD: ${{ secrets.WRITE_PACKAGES_TOKEN }}
      run: |
        echo "Publish for Gradle ${{ matrix.gradle-version }}"
        ./gradlew publishAllPublicationsToGitHubRepository "-Pgradle-version=${{ matrix.gradle-version }}"
