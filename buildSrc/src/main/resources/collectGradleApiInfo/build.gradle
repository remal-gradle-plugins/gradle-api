import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.gradle.internal.classloader.ClassLoaderSpec
import org.gradle.internal.classloader.ClassLoaderVisitor
import org.gradle.internal.classloader.FilteringClassLoader
import org.gradle.util.GradleVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

configurations { localGroovy }
dependencies { localGroovy localGroovy() }

configurations { gradleApi }
dependencies { gradleApi gradleApi() }

configurations { gradleTestKit }
dependencies { gradleTestKit gradleTestKit() }

configurations { gradleKotlinDsl }
if (GradleVersion.current() >= GradleVersion.version('5.0')) {
    dependencies {
        gradleKotlinDsl project.files {
            project.provider {
                Class<?> kotlinExtensionsClass = Class.forName(
                    'org.gradle.kotlin.dsl.provider.KotlinScriptClassPathProviderKt'
                )
                return kotlinExtensionsClass.gradleKotlinDslOf(project)
            }
        }
    }
}

@SuppressWarnings('GrPackage')
class ClassLoaderLocator {}

tasks.create('collectGradleApiInfo') {
    doFirst {
        Map<String, Object> result = [
            'version'          : project.gradle.gradleVersion,
            'gradleHomeDir'    : project.gradle.gradleHomeDir?.absolutePath,
            'gradleUserHomeDir': project.gradle.gradleUserHomeDir?.absolutePath,
        ]

        Set<File> localGroovyFiles = new LinkedHashSet<>(configurations.localGroovy.files)
        result.put('localGroovyFiles', localGroovyFiles.collect { it.absolutePath })

        Set<File> gradleApiFiles = new LinkedHashSet<>(configurations.gradleApi.files)
        gradleApiFiles.removeAll(localGroovyFiles)
        result.put('gradleApiFiles', gradleApiFiles.collect { it.absolutePath })

        Set<File> gradleTestKitFiles = new LinkedHashSet<>(configurations.gradleTestKit.files)
        gradleTestKitFiles.removeAll(localGroovyFiles)
        gradleTestKitFiles.removeAll(gradleApiFiles)
        result.put('gradleTestKitFiles', gradleTestKitFiles.collect { it.absolutePath })

        Set<File> gradleKotlinDslFiles = new LinkedHashSet<>(configurations.gradleKotlinDsl.files)
        gradleKotlinDslFiles.removeAll(localGroovyFiles)
        gradleKotlinDslFiles.removeAll(gradleApiFiles)
        result.put('gradleKotlinDslFiles', gradleKotlinDslFiles.collect { it.absolutePath })

        List<Map<String, Object>> classLoaderResults = []
        result.put('classLoaders', classLoaderResults)
        Map<String, Object> classLoaderResult = null
        ClassLoaderVisitor classLoaderVisitor = new ClassLoaderVisitor() {
            @Override
            void visit(ClassLoader classLoader) {
                if (classLoader == ClassLoader.systemClassLoader) {
                    return
                }
                classLoaderResult = [:]
                classLoaderResults.add(classLoaderResult)
                super.visit(classLoader)
            }

            @Override
            void visitSpec(ClassLoaderSpec spec) {
                super.visitSpec(spec)
                if (spec instanceof FilteringClassLoader.Spec) {
                    String specJson = JsonOutput.toJson(spec)
                    classLoaderResult.put('spec', new JsonSlurper().parseText(specJson))
                }
            }

            @Override
            void visitClassPath(URL[] classPath) {
                super.visitClassPath(classPath)
                List<String> classpath = classLoaderResult.computeIfAbsent('classpath', { new ArrayList<String>() })
                for (URL item : classPath) {
                    classpath.add(item.toString())
                }
            }
        }
        classLoaderVisitor.visit(ClassLoaderLocator.class.classLoader)

        String resultJson = JsonOutput.prettyPrint(JsonOutput.toJson(result))
        String resultFilePath = project.hasProperty('output-json-file')
            ? project.property('output-json-file')
            : null
        if (resultFilePath != null) {
            project.file(resultFilePath).setText(resultJson, 'UTF-8')
        } else {
            println resultJson
        }
    }
}
